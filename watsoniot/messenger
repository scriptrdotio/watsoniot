
var http = require("http");
var log = require("log"); log.setLevel("info");
var configModule = require("./config"); 

/**
 * @class Messenger
 * @constructor
 * @param {Object} [config] optiona. Can use /config if not provided
 * @param {String} [config.username]: the app's API Key (obtained from Watson IoT service)      
 * @param {String} [config.token]: the app's auth token  (obtained from Watson IoT service) 
 * @param {String} [config.ur]: the URL prefix to use to send a command to the device (e.g. 
 * https://orgId.messaging.internetofthings.ibmcloud.com:8883/api/v0002/
 * @param {Number} [config.maxWait] 
 */
function Messenger(config) {
    this.config = config ? config : {username: configModule.apiKey, token: configModule.appToken, url: configModule.url, maxWait: configModule.maxWait};
}

/**
 * Send a command to a device on behalf of an application
 * @method sendCommand
 * @param {Object} [device]
 * @param {String} [device.url]: the url prefix to use by applications to send commands on bluemix
 * @param {Object} [msg]
 * @param {Number} [msg.maxWait]:  wait time of the execution of a command
 * @param {String} [msg.params]:  arguments passed to the command (optional)
 * @param {String} [msg.commandId]:  the command to execute
 */
Messenger.prototype.sendCommand = function(device, msg) {
   
    // https://orgId.messaging.internetofthings.ibmcloud.com:8883/api/v0002/application/types/typeId/devices/deviceId/commands/commandId
    var url = this.config.url + "application/types/" + device.type + "/devices/" + device.id + "/commands/" + msg.commandId;
    var msgBody = {
        "waitTimeSecs": msg.maxWait ? msg.maxWait : this.config.maxWait
    };
    
    if (msg.params) {
        
        for (var key in msg.params) {
            msgBody[key] = msg.params[key];
        }        
    }
    
    var reqParams = {
        
        url: url,
        method: "POST",
        headers: {
            "Authorization":  "Basic " + btoa(this.config.username + ":" + this.config.token),
            "Content-Type": "application/json"
        },
        bodyString: JSON.stringify(msgBody) 
    };
    
    log.info("Request " + JSON.stringify(reqParams));
    var resp = http.request(reqParams);
    log.info("Response " + JSON.stringify(resp));
    return resp;
};