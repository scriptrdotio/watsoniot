var devicemanagement = require("../devicemanagement");
var config = require("../config");

try {

    // Use application credentials, i.e. API key and API token
    // In this example, we retrieve the credentials from the config file
    var config = {

        url: config.url,
        url_: config.url_,
        username: config.apiKey,
        token: config.appToken,
        maxWait: config.maxWait
    };

    // Manipulate devices using the DeviceManager class. 
    // Start by obtaining a reference to an instance of the latter
    var deviceMgr = new devicemanagement.DeviceManager(config);

    // Obtain a reference to a Device instance (that wraps an actual device device in Watson IoT)
    var device = deviceMgr.getDeviceOfType({type: "nucleo", id:"2162601439-id"});

    // Send a command to the device on behalf of the application (since you are using API Key + API token)
    // type is the mandatory command type and params is an object that contains optional parameters to send 
    // along with the command
    var commandOutput = device.sendCommand({type: "Control", params: {"door":"lock"}}); // output should be empty

    // List the last events sent by the device
    var eventList = device.listLastEvents();

    /* 
     * The DeviceManager also provides some useful methods
     * Check the class for all available methods
     */

    // List all types of device in the corresponding Watson IoT service
    var deviceList = deviceMgr.listDeviceTypes();

    // List all devices of a given type in the corresponding Watson IoT service
    var nuceloDeviceList = deviceMgr.listDevicesOfType("nucleo");   
    
    return {
        
        commandOutput: commandOutput,
        eventList: eventList,
        deviceList: deviceList,
        nuceloDeviceList: nuceloDeviceList
    };
}catch(exception){
    return exception;
}
